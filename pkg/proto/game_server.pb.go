// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/game_server.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	proto/game_server.proto

It has these top-level messages:
	Offer
	Answer
	ICECandidate
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type Offer struct {
	Body string `protobuf:"bytes,1,opt,name=body" json:"body,omitempty"`
}

func (m *Offer) Reset()                    { *m = Offer{} }
func (m *Offer) String() string            { return proto1.CompactTextString(m) }
func (*Offer) ProtoMessage()               {}
func (*Offer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Offer) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

type Answer struct {
	Body string `protobuf:"bytes,1,opt,name=body" json:"body,omitempty"`
}

func (m *Answer) Reset()                    { *m = Answer{} }
func (m *Answer) String() string            { return proto1.CompactTextString(m) }
func (*Answer) ProtoMessage()               {}
func (*Answer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Answer) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

type ICECandidate struct {
	Body string `protobuf:"bytes,1,opt,name=body" json:"body,omitempty"`
}

func (m *ICECandidate) Reset()                    { *m = ICECandidate{} }
func (m *ICECandidate) String() string            { return proto1.CompactTextString(m) }
func (*ICECandidate) ProtoMessage()               {}
func (*ICECandidate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ICECandidate) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func init() {
	proto1.RegisterType((*Offer)(nil), "Offer")
	proto1.RegisterType((*Answer)(nil), "Answer")
	proto1.RegisterType((*ICECandidate)(nil), "ICECandidate")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GameServer service

type GameServerClient interface {
	FirstSignaling(ctx context.Context, in *Offer, opts ...grpc.CallOption) (*Answer, error)
	TrickleSignaling(ctx context.Context, opts ...grpc.CallOption) (GameServer_TrickleSignalingClient, error)
}

type gameServerClient struct {
	cc *grpc.ClientConn
}

func NewGameServerClient(cc *grpc.ClientConn) GameServerClient {
	return &gameServerClient{cc}
}

func (c *gameServerClient) FirstSignaling(ctx context.Context, in *Offer, opts ...grpc.CallOption) (*Answer, error) {
	out := new(Answer)
	err := grpc.Invoke(ctx, "/GameServer/FirstSignaling", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServerClient) TrickleSignaling(ctx context.Context, opts ...grpc.CallOption) (GameServer_TrickleSignalingClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GameServer_serviceDesc.Streams[0], c.cc, "/GameServer/TrickleSignaling", opts...)
	if err != nil {
		return nil, err
	}
	x := &gameServerTrickleSignalingClient{stream}
	return x, nil
}

type GameServer_TrickleSignalingClient interface {
	Send(*ICECandidate) error
	Recv() (*ICECandidate, error)
	grpc.ClientStream
}

type gameServerTrickleSignalingClient struct {
	grpc.ClientStream
}

func (x *gameServerTrickleSignalingClient) Send(m *ICECandidate) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gameServerTrickleSignalingClient) Recv() (*ICECandidate, error) {
	m := new(ICECandidate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for GameServer service

type GameServerServer interface {
	FirstSignaling(context.Context, *Offer) (*Answer, error)
	TrickleSignaling(GameServer_TrickleSignalingServer) error
}

func RegisterGameServerServer(s *grpc.Server, srv GameServerServer) {
	s.RegisterService(&_GameServer_serviceDesc, srv)
}

func _GameServer_FirstSignaling_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Offer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServerServer).FirstSignaling(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GameServer/FirstSignaling",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServerServer).FirstSignaling(ctx, req.(*Offer))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameServer_TrickleSignaling_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GameServerServer).TrickleSignaling(&gameServerTrickleSignalingServer{stream})
}

type GameServer_TrickleSignalingServer interface {
	Send(*ICECandidate) error
	Recv() (*ICECandidate, error)
	grpc.ServerStream
}

type gameServerTrickleSignalingServer struct {
	grpc.ServerStream
}

func (x *gameServerTrickleSignalingServer) Send(m *ICECandidate) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gameServerTrickleSignalingServer) Recv() (*ICECandidate, error) {
	m := new(ICECandidate)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _GameServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "GameServer",
	HandlerType: (*GameServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FirstSignaling",
			Handler:    _GameServer_FirstSignaling_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TrickleSignaling",
			Handler:       _GameServer_TrickleSignaling_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/game_server.proto",
}

func init() { proto1.RegisterFile("proto/game_server.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 177 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2f, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x4f, 0x4f, 0xcc, 0x4d, 0x8d, 0x2f, 0x4e, 0x2d, 0x2a, 0x4b, 0x2d, 0xd2, 0x03, 0x8b,
	0x28, 0x49, 0x73, 0xb1, 0xfa, 0xa7, 0xa5, 0xa5, 0x16, 0x09, 0x09, 0x71, 0xb1, 0x24, 0xe5, 0xa7,
	0x54, 0x4a, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0x81, 0xd9, 0x4a, 0x32, 0x5c, 0x6c, 0x8e, 0x79,
	0xc5, 0xe5, 0x38, 0x64, 0x95, 0xb8, 0x78, 0x3c, 0x9d, 0x5d, 0x9d, 0x13, 0xf3, 0x52, 0x32, 0x53,
	0x12, 0x4b, 0x52, 0xb1, 0xa9, 0x31, 0xca, 0xe4, 0xe2, 0x72, 0x4f, 0xcc, 0x4d, 0x0d, 0x06, 0x5b,
	0x29, 0xa4, 0xcc, 0xc5, 0xe7, 0x96, 0x59, 0x54, 0x5c, 0x12, 0x9c, 0x99, 0x9e, 0x97, 0x98, 0x93,
	0x99, 0x97, 0x2e, 0xc4, 0xa6, 0x07, 0xb6, 0x5d, 0x8a, 0x5d, 0x0f, 0x62, 0x91, 0x12, 0x83, 0x90,
	0x19, 0x97, 0x40, 0x48, 0x51, 0x66, 0x72, 0x76, 0x4e, 0x2a, 0x42, 0x19, 0xaf, 0x1e, 0xb2, 0x4d,
	0x52, 0xa8, 0x5c, 0x25, 0x06, 0x0d, 0x46, 0x03, 0x46, 0x27, 0xf6, 0x28, 0x56, 0xb0, 0x97, 0x92,
	0xd8, 0xc0, 0x94, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x5a, 0x8b, 0x3f, 0xb7, 0xf4, 0x00, 0x00,
	0x00,
}
