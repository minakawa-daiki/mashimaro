// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/streamer.proto

package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type StartVideoStreamingRequest struct {
	GstPipeline string `protobuf:"bytes,1,opt,name=gst_pipeline,json=gstPipeline" json:"gst_pipeline,omitempty"`
}

func (m *StartVideoStreamingRequest) Reset()                    { *m = StartVideoStreamingRequest{} }
func (m *StartVideoStreamingRequest) String() string            { return proto1.CompactTextString(m) }
func (*StartVideoStreamingRequest) ProtoMessage()               {}
func (*StartVideoStreamingRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *StartVideoStreamingRequest) GetGstPipeline() string {
	if m != nil {
		return m.GstPipeline
	}
	return ""
}

type StartVideoStreamingResponse struct {
	ListenPort uint32 `protobuf:"varint,1,opt,name=listen_port,json=listenPort" json:"listen_port,omitempty"`
}

func (m *StartVideoStreamingResponse) Reset()                    { *m = StartVideoStreamingResponse{} }
func (m *StartVideoStreamingResponse) String() string            { return proto1.CompactTextString(m) }
func (*StartVideoStreamingResponse) ProtoMessage()               {}
func (*StartVideoStreamingResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *StartVideoStreamingResponse) GetListenPort() uint32 {
	if m != nil {
		return m.ListenPort
	}
	return 0
}

type StartAudioStreamingRequest struct {
	GstPipeline string `protobuf:"bytes,1,opt,name=gst_pipeline,json=gstPipeline" json:"gst_pipeline,omitempty"`
}

func (m *StartAudioStreamingRequest) Reset()                    { *m = StartAudioStreamingRequest{} }
func (m *StartAudioStreamingRequest) String() string            { return proto1.CompactTextString(m) }
func (*StartAudioStreamingRequest) ProtoMessage()               {}
func (*StartAudioStreamingRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *StartAudioStreamingRequest) GetGstPipeline() string {
	if m != nil {
		return m.GstPipeline
	}
	return ""
}

type StartAudioStreamingResponse struct {
	ListenPort uint32 `protobuf:"varint,1,opt,name=listen_port,json=listenPort" json:"listen_port,omitempty"`
}

func (m *StartAudioStreamingResponse) Reset()                    { *m = StartAudioStreamingResponse{} }
func (m *StartAudioStreamingResponse) String() string            { return proto1.CompactTextString(m) }
func (*StartAudioStreamingResponse) ProtoMessage()               {}
func (*StartAudioStreamingResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *StartAudioStreamingResponse) GetListenPort() uint32 {
	if m != nil {
		return m.ListenPort
	}
	return 0
}

func init() {
	proto1.RegisterType((*StartVideoStreamingRequest)(nil), "StartVideoStreamingRequest")
	proto1.RegisterType((*StartVideoStreamingResponse)(nil), "StartVideoStreamingResponse")
	proto1.RegisterType((*StartAudioStreamingRequest)(nil), "StartAudioStreamingRequest")
	proto1.RegisterType((*StartAudioStreamingResponse)(nil), "StartAudioStreamingResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Streamer service

type StreamerClient interface {
	StartVideoStreaming(ctx context.Context, in *StartVideoStreamingRequest, opts ...grpc.CallOption) (*StartVideoStreamingResponse, error)
	StartAudioStreaming(ctx context.Context, in *StartAudioStreamingRequest, opts ...grpc.CallOption) (*StartAudioStreamingResponse, error)
}

type streamerClient struct {
	cc *grpc.ClientConn
}

func NewStreamerClient(cc *grpc.ClientConn) StreamerClient {
	return &streamerClient{cc}
}

func (c *streamerClient) StartVideoStreaming(ctx context.Context, in *StartVideoStreamingRequest, opts ...grpc.CallOption) (*StartVideoStreamingResponse, error) {
	out := new(StartVideoStreamingResponse)
	err := grpc.Invoke(ctx, "/Streamer/StartVideoStreaming", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamerClient) StartAudioStreaming(ctx context.Context, in *StartAudioStreamingRequest, opts ...grpc.CallOption) (*StartAudioStreamingResponse, error) {
	out := new(StartAudioStreamingResponse)
	err := grpc.Invoke(ctx, "/Streamer/StartAudioStreaming", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Streamer service

type StreamerServer interface {
	StartVideoStreaming(context.Context, *StartVideoStreamingRequest) (*StartVideoStreamingResponse, error)
	StartAudioStreaming(context.Context, *StartAudioStreamingRequest) (*StartAudioStreamingResponse, error)
}

func RegisterStreamerServer(s *grpc.Server, srv StreamerServer) {
	s.RegisterService(&_Streamer_serviceDesc, srv)
}

func _Streamer_StartVideoStreaming_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartVideoStreamingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamerServer).StartVideoStreaming(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Streamer/StartVideoStreaming",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamerServer).StartVideoStreaming(ctx, req.(*StartVideoStreamingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Streamer_StartAudioStreaming_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartAudioStreamingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamerServer).StartAudioStreaming(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Streamer/StartAudioStreaming",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamerServer).StartAudioStreaming(ctx, req.(*StartAudioStreamingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Streamer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Streamer",
	HandlerType: (*StreamerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartVideoStreaming",
			Handler:    _Streamer_StartVideoStreaming_Handler,
		},
		{
			MethodName: "StartAudioStreaming",
			Handler:    _Streamer_StartAudioStreaming_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/streamer.proto",
}

func init() { proto1.RegisterFile("proto/streamer.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 207 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x29, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x2f, 0x2e, 0x29, 0x4a, 0x4d, 0xcc, 0x4d, 0x2d, 0xd2, 0x03, 0x73, 0x95, 0xec, 0xb9,
	0xa4, 0x82, 0x4b, 0x12, 0x8b, 0x4a, 0xc2, 0x32, 0x53, 0x52, 0xf3, 0x83, 0xc1, 0x72, 0x99, 0x79,
	0xe9, 0x41, 0xa9, 0x85, 0xa5, 0xa9, 0xc5, 0x25, 0x42, 0x8a, 0x5c, 0x3c, 0xe9, 0xc5, 0x25, 0xf1,
	0x05, 0x99, 0x05, 0xa9, 0x39, 0x99, 0x79, 0xa9, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0xdc,
	0xe9, 0xc5, 0x25, 0x01, 0x50, 0x21, 0x25, 0x3b, 0x2e, 0x69, 0xac, 0x06, 0x14, 0x17, 0xe4, 0xe7,
	0x15, 0xa7, 0x0a, 0xc9, 0x73, 0x71, 0xe7, 0x64, 0x16, 0x97, 0xa4, 0xe6, 0xc5, 0x17, 0xe4, 0x17,
	0x95, 0x80, 0x0d, 0xe0, 0x0d, 0xe2, 0x82, 0x08, 0x05, 0xe4, 0x17, 0x95, 0xc0, 0x1d, 0xe0, 0x58,
	0x9a, 0x92, 0x49, 0x91, 0x03, 0xd0, 0x0d, 0x20, 0xd2, 0x01, 0x46, 0x9b, 0x18, 0xb9, 0x38, 0x82,
	0xa1, 0x81, 0x22, 0x14, 0xc4, 0x25, 0x8c, 0xc5, 0x37, 0x42, 0xd2, 0x7a, 0xb8, 0x03, 0x49, 0x4a,
	0x46, 0x0f, 0x4f, 0x00, 0x28, 0x31, 0xc0, 0xcd, 0x44, 0x75, 0x20, 0xcc, 0x4c, 0xac, 0xfe, 0x86,
	0x99, 0x89, 0xdd, 0x4f, 0x4a, 0x0c, 0x4e, 0xec, 0x51, 0xac, 0xe0, 0xf8, 0x4b, 0x62, 0x03, 0x53,
	0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc5, 0x19, 0xc7, 0xbf, 0xde, 0x01, 0x00, 0x00,
}
